---
import { getCollection } from 'astro:content'
import type { ImageMetadata } from 'astro'
import { SEO, TwitterCardType } from 'astro-seo'
import type {
  Article,
  BreadcrumbList,
  Organization,
  Person,
  WebSite,
  WithContext
} from 'schema-dts'

import { Settings } from '../config'
import defaultImage from '../assets/community.jpeg'

export interface Props {
  author?: string
  title?: string
  description?: string
  date?: Date
  image?: ImageMetadata
  tags?: string[]
}

const {
  author,
  title = 'Home',
  description = Settings.description,
  date = Settings.buildTime,
  image = defaultImage,
  tags
} = Astro.props

const siteurl = new URL(import.meta.env.BASE_URL, Astro.url)
const authors = await getCollection('author')
const authorData = author
  ? authors.filter((a) => a.data.title == author)[0].data
  : {
      title: Settings.site_name,
      description: Settings.description,
      website: siteurl.toString()
    }
const authorUrl = author
  ? authors.filter((a) => a.data.title == author)[0].slug
  : siteurl.toString()
const type = Astro.url.pathname.includes('/post/') ? 'post' : 'page'
const year = Settings.buildTime.getFullYear()

const openGraph = {
  basic: {
    title: title,
    type: 'website',
    image: new URL(image.src, siteurl).toString(),
    url: Astro.url.toString()
  },
  optional: {
    description: description,
    siteName: Settings.site_name,
    locale: Settings.locale
  },
  image: {
    alt: title,
    width: image.width,
    height: image.height,
    type: 'image/' + image.format
  },
  article: {
    author: author,
    publishedTime: Settings.buildTime.toISOString(),
    tags: tags
  }
}

const twitter = {
  card: 'summary_large_image' as TwitterCardType,
  site: Settings.twitter,
  creator: Settings.twitter
}

const website: WithContext<WebSite> = {
  '@context': 'https://schema.org',
  '@type': 'WebSite',
  about: {
    '@id': new URL('about-us', siteurl).toString()
  },
  audience: 'public',
  abstract: Settings.description,
  author: {
    '@id': siteurl.toString()
  },
  copyrightHolder: {
    '@id': siteurl.toString()
  },
  copyrightYear: year,
  creator: {
    '@id': siteurl.toString()
  },
  description: Settings.description,
  image: {
    '@type': 'ImageObject',
    url: new URL(image.src, siteurl).toString()
  },
  inLanguage: 'en',
  name: Settings.site_name,
  publisher: {
    '@id': siteurl.toString()
  },
  url: siteurl.toString()
}

const organization: WithContext<Organization> = {
  '@context': 'https://schema.org',
  '@id': siteurl.toString(),
  '@type': 'Organization',
  address: Settings.location,
  contactPoint: {
    '@type': 'ContactPoint',
    email: Settings.email
  },
  description: Settings.description,
  email: Settings.email,
  founder: {
    '@id': Settings.email
  },
  location: Settings.location,
  // image: {
  //   '@type': 'ImageObject',
  //   url: logo,
  // },
  // logo: {
  //   '@type': 'ImageObject',
  //   url: logo,
  // },
  name: Settings.site_name,
  url: siteurl.toString()
}

const breadcrumbList: WithContext<BreadcrumbList> = {
  '@context': 'https://schema.org',
  '@type': 'BreadcrumbList',
  description: 'Breadcrumbs list',
  itemListElement: [
    {
      '@type': 'ListItem',
      item: {
        '@id': siteurl.toString(),
        name: Settings.site_name
      },
      position: 1
    },
    {
      '@type': 'ListItem',
      item: {
        '@id': Astro.url.toString(),
        name: title
      },
      position: 2
    }
  ],
  numberOfItems: 2,
  name: 'Breadcrumbs'
}

const person: WithContext<Person> = {
  '@context': 'https://schema.org',
  '@type': 'Person',
  '@id': authorData.website || authorUrl,
  name: authorData.title,
  url: authorData.website || authorUrl,
  worksFor: {
    '@id': siteurl.toString()
  }
}

const article: WithContext<Article> = {
  '@context': 'https://schema.org',
  '@type': 'Article',
  articleSection: type,
  author: {
    '@id': authorData.website || authorUrl
  },
  copyrightHolder: {
    '@id': siteurl.toString()
  },
  copyrightYear: year,
  creativeWorkStatus: 'Published',
  creator: {
    '@id': authorData.website || authorUrl
  },
  dateCreated: date.toISOString(),
  dateModified: Settings.buildTime.toISOString(),
  datePublished: date.toISOString(),
  description: description,
  headline: title,
  keywords: tags && tags.join(', '),
  image: {
    '@type': 'ImageObject',
    url: new URL(image.src, siteurl).toString()
  },
  inLanguage: 'en',
  mainEntityOfPage: siteurl.toString(),
  name: title,
  publisher: {
    '@id': siteurl.toString()
  },
  url: Astro.url.toString()
}
---

<SEO
  title={Settings.site_name + ' | ' + title}
  description={description}
  {openGraph}
  {twitter}
/>
<script is:inline set:html={JSON.stringify(website)} type="application/ld+json"
></script>
<script
  is:inline
  set:html={JSON.stringify(organization)}
  type="application/ld+json"
></script>
<script
  is:inline
  set:html={JSON.stringify(breadcrumbList)}
  type="application/ld+json"
></script>
<script is:inline set:html={JSON.stringify(person)} type="application/ld+json"
></script>
<script is:inline set:html={JSON.stringify(article)} type="application/ld+json"
></script>
